<<<<<<< HEAD
import { Inter } from "next/font/google";
import { getServerSession } from "next-auth";
import SessionProvider from "../components/SessionProvider";
import "./globals.css";
import Head from "../components/Head";



const inter = Inter({ subsets: ["latin"] });




export const metadata = {
=======
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
>>>>>>> dev
  title: "Create Next App",
  description: "Generated by create next app",
};

<<<<<<< HEAD
import { ReactNode } from "react";

export default async function RootLayout({
  children,
}: {
  children: ReactNode;
}) {
  try {
    // Fetch session on the server side
    const session = await getServerSession();

    return (
      <html lang="en">
        <body className={inter.className}>
          
          <Head/>
          {/* Wrapping children with SessionProvider to manage session */}
          <SessionProvider session={session}>{children}</SessionProvider>
         
        </body>
      </html>
    );
  } catch (error) {
    console.error("Error fetching session:", error);
    return (
      <html lang="en">
        <body className={inter.className}>
          <Head/>
          <SessionProvider session={null}>{children}</SessionProvider>
          
        </body>
      </html>
    );
  }
}
=======
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}
>>>>>>> dev
